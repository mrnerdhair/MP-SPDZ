from Compiler.library import *
from Compiler.circuit import *
from Compiler.GC.types import *

sb256 = sint.get_type(256)

O = [sb256(0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296), sb256(0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5)]
A = sb256(0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc)

def point_add(p, q):
    s = (q[1] - p[1]) / (q[0] - p[0])
    x = s ** 2 - p[0] - q[0]
    y = s * (p[0] - x) - p[1]
    return [x, y]


def point_double(p):
    s = (3 * p[0] ** 2 + A) / (2 * p[1])
    x = s ** 2 - 2 * p[0]
    y = s * (p[0] - x) - p[1]
    return [x, y]

def scalar_mult(p, s):
    res = O
    temp = p
    for bit in s.bit_decompose():
        bit = sbit(bit)
        res = bit.if_else(point_add(res, temp), res)
        temp = bit.if_else(temp, point_double(temp))
    res

x = scalar_mult(O, sb256(1))
x[0].reveal().print_reg()
x[1].reveal().print_reg()
